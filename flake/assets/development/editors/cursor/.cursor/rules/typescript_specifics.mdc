---
description: TypeScript strong typing (avoid 'any'), interfaces/types, utility types, compiler options.
globs: *.ts,*.tsx
alwaysApply: false
---

# TypeScript Specific Rules

- **Strong Typing:** Leverage TypeScript's type system. Avoid using `any` unless absolutely necessary and justified; prefer `unknown` or specific types.
- **Interfaces vs. Types:** Use `interface` for defining object shapes and contracts that can be implemented or extended. Use `type` for unions, intersections, primitives, and more complex type manipulations. Be consistent within the project.
- **Utility Types:** Utilize built-in utility types (e.g., `Partial`, `Readonly`, `Pick`, `Omit`) to create new types based on existing ones.
- **Compiler Flags:** Write code that adheres to strict compiler options if enabled in `tsconfig.json` (e.g., `strictNullChecks`, `noImplicitAny`).
- **ESM Syntax:** Use ES Module syntax (`import`/`export`).