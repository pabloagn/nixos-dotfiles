---
description: Next.js conventions (App Router vs Pages Router, Server/Client Components, Data Fetching, Routing, specific APIs). Complements React/JS/TS rules.
globs: *.js,*.jsx,*.ts,*.tsx,next.config.js,app/**/*,pages/**/*,components/**/*,lib/**/*,styles/**/*,public/**/*
alwaysApply: false
---

# Next.js Specific Rules

*(Complements general React, JavaScript, and TypeScript rules)*

- **Router Context:** Identify whether the project uses the **App Router** or the **Pages Router**. Apply patterns specific to the active router. Ask the user if unsure.
    - **App Router:** Understand Server Components (default), Client Components (`'use client'`), file-based routing (`page.js`, `layout.js`, `loading.js`, `error.js`, route groups, dynamic segments), Server Actions.
    - **Pages Router:** Understand `_app.js`, `_document.js`, `getServerSideProps`, `getStaticProps`, `getStaticPaths`, API routes (`pages/api`).
- **Component Types (App Router):** Default to Server Components for data fetching and backend logic. Use Client Components (`'use client'`) only when necessary for interactivity, state, lifecycle effects, or browser-only APIs. Minimize Client Component bundle size.
- **Data Fetching:** Use recommended data fetching patterns for the router context (e.g., `fetch` in Server Components/Route Handlers/Server Actions for App Router; `getServerSideProps`/`getStaticProps` for Pages Router). Leverage Next.js caching and revalidation features.
- **Routing & Linking:** Use the `next/link` component for client-side navigation between pages/routes. Use file-system based routing conventions correctly.
- **Next.js APIs:** Utilize Next.js specific components and APIs where appropriate (e.g., `next/image` for image optimization, `next/font` for font optimization, `next/script` for third-party scripts).
- **Environment Variables:** Use `NEXT_PUBLIC_` prefix for environment variables that need to be exposed to the browser. Access other backend-only variables directly via `process.env`.
- **Configuration:** Modify `next.config.js` for custom configurations (redirects, rewrites, headers, etc.).
