---
description: Scala conventions (immutability, functional style, case classes, pattern matching).
globs: "*.scala", "*.sc"
alwaysApply: false
---

# Scala Specific Rules

- **Immutability:** Prefer immutable data structures (`val`, immutable collections) over mutable ones (`var`, mutable collections) whenever possible.
- **Functional Style:** Leverage functional programming concepts: use higher-order functions, `map`, `flatMap`, `filter`, etc., on collections. Avoid side effects in functions where practical.
- **Case Classes:** Use `case class` for modeling immutable data structures. Benefit from automatically generated methods (`equals`, `hashCode`, `toString`, `copy`).
- **Pattern Matching:** Utilize pattern matching for complex conditional logic and data extraction, especially with case classes and Options/Eithers.
- **Type Inference:** Leverage Scala's type inference but add explicit type annotations for public APIs and complex expressions for clarity.
- **Error Handling:** Prefer `Option`, `Try`, or `Either` over throwing exceptions for recoverable errors.
