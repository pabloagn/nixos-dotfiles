---
description: Haskell idioms (purity, types, immutability, typeclasses, monads, laziness).
globs: *.hs,*.lhs,*.cabal,stack.yaml
alwaysApply: false
---

# Haskell Specific Rules

- **Purity:** Strive for pure functions whenever possible. Isolate side effects using appropriate monadic contexts (e.g., `IO`, `Maybe`, `Either`).
- **Strong Typing:** Leverage the strong static type system. Write explicit type signatures for all top-level definitions. Use typeclasses for polymorphism.
- **Immutability:** All bindings are immutable by default; embrace this.
- **Laziness:** Be mindful of Haskell's lazy evaluation strategy, especially regarding space leaks and performance.
- **Idiomatic Constructs:** Use pattern matching extensively. Employ higher-order functions (`map`, `filter`, `foldr`/`foldl'`). Use point-free style where it enhances readability, but avoid obfuscation.
- **Error Handling:** Use `Maybe` for optional values and `Either e a` for errors that carry information. Avoid partial functions like `head` or `read` where possible; use safe alternatives.
- **Documentation:** Use Haddock syntax for documenting functions and modules.
- **Build Tools:** Follow conventions for Cabal (`.cabal`) or Stack (`stack.yaml`).
