---
description: Rust idioms (ownership, borrowing, error handling via Result/Option, Clippy lints).
globs: *.rs,Cargo.toml
alwaysApply: false
---

# Rust Specific Rules

- **Ownership & Borrowing:** Write code that respects Rust's ownership and borrowing rules. Minimize unnecessary cloning (`.clone()`). Use lifetimes explicitly where needed, but rely on elision when possible.
- **Error Handling:** Use `Result<T, E>` for recoverable errors and `Option<T>` for optional values. Avoid `.unwrap()` or `.expect()` in production code; handle potential errors explicitly (e.g., using `match`, `if let`, `?` operator).
- **Clippy Lints:** Write code that adheres to common Rust style and idiom checks, as enforced by Clippy. Assume `cargo clippy` will be run.
- **Idiomatic Code:** Use iterators and adapters (`map`, `filter`, `fold`, etc.) effectively. Prefer standard library types and traits (`std`). Use pattern matching (`match`, `if let`).
- **Macros:** Use macros judiciously. Prefer functions where possible unless macro benefits (code generation, variadics) are clear.
- **`unsafe` Blocks:** Avoid `unsafe` blocks unless absolutely necessary and clearly justified with comments explaining the invariants being upheld.
- **`Cargo.toml`:** Keep `Cargo.toml` organized and specify dependency versions appropriately.
